#!/usr/bin/env node

const bom = require("../index.js");
const fs = require("fs");
const path = require("path");

const args = require("yargs")
  .option("output", {
    alias: "o",
    description: "Output file for bom.xml or bom.json. Default console",
  })
  .option("type", {
    alias: "t",
    description: "Project type",
  })
  .option("recurse", {
    alias: "r",
    type: "boolean",
    description: "Recurse mode suitable for mono-repos",
  })
  .option("version", {
    alias: "v",
    description: "Print version number",
  })
  .option("server-url", {
    description:
      "Dependency track or AppThreat server url. Eg: https://deptrack.appthreat.io",
  })
  .option("api-key", {
    description: "Dependency track or AppThreat server api key",
  })
  .option("project-name", {
    description:
      "Dependency track or AppThreat project name. Default use the directory name",
  })
  .option("project-version", {
    description:
      "Dependency track or AppThreat project version. Default master",
    default: "master",
  })
  .option("project-id", {
    description:
      "Dependency track or AppThreat project id. Either provide the id or the project name and version together",
  })
  .help("h").argv;

if (args.version) {
  const packageJsonAsString = fs.readFileSync(
    path.join(__dirname, "../", "package.json"),
    "utf-8"
  );
  const packageJson = JSON.parse(packageJsonAsString);

  console.log(packageJson.version);
  process.exit(0);
}

/**
 * projectType: python, nodejs, java, golang
 * multiProject: Boolean to indicate monorepo or multi-module projects
 */
let options = {
  dev: true,
  projectType: args.type,
  multiProject: args.recurse,
  depth: 3,
};

let filePath = args._[0] || ".";

/**
 * Method to start the bom creation process
 *
 * @param includeBomSerialNumber Boolean to include BOM serial number
 * @param path to the project
 * @param options Parse options from the cli
 * @param callback Callback function accepting err, bomData
 */
bom.createBom(true, filePath, options, (err, bomData, bomJsonData) => {
  if (!args.projectName) {
    if (filePath !== ".") {
      args.projectName = path.basename(filePath);
    } else {
      args.projectName = path.basename(path.resolve(filePath));
    }
  }
  if (args.output) {
    if (Array.isArray(bomData)) {
      console.log("BOM files produced:", bomData);
    } else {
      if (bomJsonData) {
        const jsonFile = args.output.replace(".xml", ".json");
        fs.writeFile(jsonFile, bomJsonData, () => {});
      }
      const xmlFile = args.output.replace(".json", ".xml");
      fs.writeFile(xmlFile, bomData, () => {});
      console.log("BOM file written to", args.output);
    }
  } else {
    if (bomJsonData) {
      console.log(Buffer.from(bomJsonData).toString());
    } else if (bomData) {
      console.log(Buffer.from(bomData).toString());
    } else {
      console.log("Unable to produce BOM for", filePath);
    }
  }

  // Automatically submit the bom data
  if (args.serverUrl && args.apiKey) {
    bom.submitBom(args, bomData, function (err, res, body) {
      if (err) console.log(err);
      console.log("Response from server", body);
    });
  }
});
