#!/usr/bin/env node

const bom = require("../index.js");
const fs = require("fs");
const path = require("path");

let args = process.argv.slice(2);
let unknownOptions = args
  .filter(x => x.startsWith("-"))
  .filter(x => !["-h", "-o", "-t", "--version"].includes(x));
if (args.includes("-h") || unknownOptions.length > 0) {
  if (unknownOptions.length > 0) {
    console.warn("ERROR: Unknown option(s) " + unknownOptions.join(" "));
  }
  console.log("Usage: cdxgen [OPTIONS] [path]");
  console.log("Options:");
  console.log("  -h        - this help");
  console.log("  -o <path> - write to file instead of stdout");
  console.log("  --version - print version number");
  process.exit(0);
}

let o = args.indexOf("-o");
let out = null;
if (o > -1) {
  out = args[o + 1];
  args = args.slice(0, o).concat(args.slice(o + 2));
}
let t = args.indexOf("-t");
let projectType = null;
if (t > -1) {
  projectType = args[t + 1];
  args = args.slice(0, t).concat(args.slice(t + 2));
}

let includeBomSerialNumber = true; // The default

let printVersion = args.indexOf("--version");
if (printVersion > -1) {
  const packageJsonAsString = fs.readFileSync(
    path.join(__dirname, "../", "package.json"),
    "utf-8"
  );
  const packageJson = JSON.parse(packageJsonAsString);

  console.log(packageJson.version);
  process.exit(0);
}

/**
 * projectType: python, nodejs, java, golang
 * multiProject: Boolean to indicate monorepo or multi-module projects
 */
let options = { dev: true, projectType, multiProject: false };

let filePath = args[0] || ".";

bom.createBom(includeBomSerialNumber, filePath, options, (err, bom) => {
  if (out) {
    if (Array.isArray(bom)) {
      console.log("BOM files produced:", bom);
    } else {
      fs.writeFile(out, bom, () => {});
    }
  } else {
    console.log(Buffer.from(bom).toString());
  }
});
