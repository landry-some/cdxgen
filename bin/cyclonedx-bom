#!/usr/bin/env node

const bom = require("../index.js");
const fs = require("fs");
const path = require("path");
const xmlFormat = require("prettify-xml");
const xmlOptions = {indent: 4, newline: "\n"};

let arguments = process.argv.slice(2);
let unknownOptions = arguments.filter(x => x.startsWith("-")).filter(x => !["-h", "-a", "-o", "-ns", "-d", "--version"].includes(x));
if (arguments.includes("-h") || unknownOptions.length > 0) {
    if (unknownOptions.length > 0) {
        console.warn("ERROR: Unknown option(s) " + unknownOptions.join(" ") );
    }
    console.log("Usage:  cyclonedx-bom [OPTIONS] [path]");
    console.log("Options:");
    console.log("  -h        - this help");
    console.log("  -a <path> - merge in additional modules from other scanner");
    console.log("  -o <path> - write to file instead of stdout");
    console.log("  -ns       - do not generate bom serial number");
    console.log("  -d        - include devDependencies");
    console.log("  --version - print version number");
    process.exit(0);
}

let includeBomSerialNumber = true; // The default

let printVersion = arguments.indexOf("--version");
if (printVersion > -1) {
    const packageJsonAsString = fs.readFileSync(path.join(__dirname, '../', 'package.json'), "utf-8");
    const packageJson = JSON.parse(packageJsonAsString);

    console.log(packageJson.version);
    process.exit(0);
}

let ns = arguments.indexOf("-ns");
if (ns > -1) {
    includeBomSerialNumber = false;
    arguments = arguments.slice(0,ns).concat(arguments.slice(ns+1));
}

let a = arguments.indexOf("-a");
let additional = "";
while (a > -1) {
    additional += fs.readFileSync(arguments[a+1], "utf-8")
        .replace(/^[\s\S]*?<components>/, "")
        .replace(/[\s]*?<.components>[\s]*?<\/bom>[\s]*?$/, "");
    arguments = arguments.slice(0,a).concat(arguments.slice(a+2));
    a = arguments.indexOf("-a");
}

let o = arguments.indexOf("-o");
let out = null;
if (o > -1) {
    out = arguments[o+1];
    arguments = arguments.slice(0,o).concat(arguments.slice(o+2));
}

let d = arguments.indexOf("-d");
let options = {};
if (d > -1) {
    options.dev = true;
    arguments = arguments.slice(0,d).concat(arguments.slice(d+1));
}


let filePath = arguments[0] || '.';

bom.createbom(includeBomSerialNumber, filePath, options, (err, bom) => {
    bom = xmlFormat(bom.replace("</components></bom>", additional + "</components></bom>"), xmlOptions);
    if (out) {
        fs.writeFile(out, bom, () => {});
    } else {
        console.log(bom);
    }
});
